{
 "cells": [
  {
   "cell_type": "markdown",
   "source": [
    "# GraphMDL for graph pattern mining"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "In this example, we are going to use the GraphMDL+ approach for mining a small set of graph patterns from graph data.\n",
    "\n",
    "GraphMDL+ is a heuristic anytime algorithm that uses the Minimum Description Length principle to select small but descriptive sets of patterns from graph data. The resulting set of patterns is significantly smaller than the complete set of patterns that can be generated by classic complete algorithms.\n"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "outputs": [],
   "source": [
    "# First we import the needed modules\n",
    "import networkx as nx\n",
    "from skmine.graph.graphmdl.graph_mdl import GraphMDL\n",
    "from skmine.graph.graphmdl import utils"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "First, we create a data graph, from which the patterns will be extracted.\n",
    "\n",
    "\n",
    "GraphMDL need edges to have exactly one label."
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5ce1da5a",
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "data_graph = nx.DiGraph() # Create new directed graph\n",
    "#Add eight nodes (from 1 to 8) to the graph\n",
    "data_graph.add_nodes_from(range(1,9))\n",
    "#Add some labels to the nodes\n",
    "data_graph.nodes[1]['label'] = 'y'\n",
    "data_graph.nodes[2]['label'] = 'x'\n",
    "data_graph.nodes[3]['label'] = 'z'\n",
    "data_graph.nodes[4]['label'] = 'x'\n",
    "data_graph.nodes[5]['label'] = 'z'\n",
    "data_graph.nodes[6]['label'] = 'x'\n",
    "data_graph.nodes[7]['label'] = 'z'\n",
    "data_graph.nodes[8]['label'] = 'w','x' # A node can have multiple labels\n",
    "\n",
    "#Add edges between nodes\n",
    "data_graph.add_edge(2,1,label='a')\n",
    "data_graph.add_edge(4,1,label='a')\n",
    "data_graph.add_edge(6,1,label='a')\n",
    "data_graph.add_edge(6,8,label='a')\n",
    "data_graph.add_edge(8,6,label='a')\n",
    "data_graph.add_edge(1,3,label='b')\n",
    "data_graph.add_edge(1,5,label='b')\n",
    "data_graph.add_edge(1,7,label='b')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "source": [
    "We can automatically draw the graph."
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a94256ed",
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "<Figure size 432x288 with 1 Axes>",
      "image/png": "\n"
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "utils.draw_graph(data_graph)"
   ]
  },
  {
   "cell_type": "markdown",
   "source": [
    "The automatic drawing is not always clear. For illustration purposes, here is a hand-made illustration as well.\n",
    "\n",
    "![example_data_graph.jpg](example_directed_graph.png)\n"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "Now we can run the GraphMDL+ approach on the data graph."
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "outputs": [
    {
     "data": {
      "text/plain": "<skmine.graph.graphmdl.graph_mdl.GraphMDL at 0x1b314a037c0>"
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "graphmdl = GraphMDL() # Initialize the approach\n",
    "graphmdl.fit(data_graph, timeout=2.5) # Run the approach on the data graph. Timeout is optional and in seconds."
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "Now we can process the extracted patterns, the initial and the final description length.\n",
    "For example, we can draw the extracted patterns, as each pattern is a graph, and compute a compression ratio with the description lengths."
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of selected patterns 3\n"
     ]
    }
   ],
   "source": [
    "patterns = list(graphmdl.patterns())\n",
    "print(\"Number of selected patterns\",len(patterns))"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "outputs": [
    {
     "data": {
      "text/plain": "<Figure size 432x288 with 1 Axes>",
      "image/png": "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\n"
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "utils.draw_graph(patterns[0])"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "outputs": [
    {
     "data": {
      "text/plain": "<Figure size 432x288 with 1 Axes>",
      "image/png": "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\n"
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "utils.draw_graph(patterns[1])"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "outputs": [
    {
     "data": {
      "text/plain": "<Figure size 432x288 with 1 Axes>",
      "image/png": "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\n"
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "utils.draw_graph(patterns[2])"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "initial description length = 279.5681873994845\n",
      "Final description length = 136.06648569569322\n",
      "Compression ratio = 48.67 %\n"
     ]
    }
   ],
   "source": [
    "print(f\"initial description length = {graphmdl.initial_description_length()}\")\n",
    "print(f\"Final description length = {graphmdl.description_length()}\")\n",
    "print(f\"Compression ratio = {round((graphmdl.description_length()/ graphmdl.initial_description_length())*100, 2)} %\")"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}